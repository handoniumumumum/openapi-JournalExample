{
    "openapi": "3.0.2",
    "info": {
        "title": "Video Game Diary API",
        "description": "This is an API for managing a video game diary. It is described using the OpenAPI 3.0 spec.", 
        "contact": {
            "email": "brandonmerrimanosu@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.2.0"
    },
    "servers": [
        {
            "url": "/api/v3"
        }
    ],
    "tags": [
        {
            "name": "game",
            "description": "Look up or add a game's identity and related journal information"
        },
        {
            "name": "entry",
            "description": "Look up and manage journal entries"
        },
        {
            "name": "user",
            "description": "Look up and manage users"
        }
    ],
    "paths": {
        "/game": {
            "put": {
                "tags": [
                    "game"
                ],
                "summary": "Update an existing game",
                "description": "Update an existing game by Id",
                "operationId": "updateGame",
                "requestBody": {
                    "description": "Update a game in the database",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Game"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Game"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Game"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success!",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Game not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "post": {
                "tags": [
                    "game"
                ],
                "summary": "Add a new game to the database",
                "description": "Add a new game to the database",
                "operationId": "addGame",
                "requestBody": {
                    "description": "Create a new game in the database",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Game"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Game"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Game"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/game/findByStatus": {
            "get": {
                "tags": [
                    "game"
                ],
                "summary": "Finds games by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findGamesByStatus",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for the filter",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "playing",
                            "enum": [
                                "playing",
                                "completed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Game"
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Game"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/game/findByTags": {
            "get": {
                "tags": [
                    "game"
                ],
                "summary": "Finds games by user tags",
                "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findGamesByTags",
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Game"
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Game"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                }
            }
        },
        "/game/{gameid}": {
            "get": {
                "tags": [
                    "game"
                ],
                "summary": "Find game by ID",
                "description": "Returns information about a single game",
                "operationId": "getGameById",
                "parameters": [
                    {
                        "name": "gameid",
                        "in": "path",
                        "description": "ID of game to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Game not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "game"
                ],
                "summary": "Update whether a user is playing the game",
                "description": "Update a game's playing status for the requesting user ",
                "operationId": "updateGameWithForm",
                "parameters": [
                    {
                        "name": "gameid",
                        "in": "path",
                        "description": "ID of the game to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the game that needs to be updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "New playing status of the game",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                          "description": "The game's playing status was updated successfully."
                    },
                    "405": {
                        "description": "The status update was invalid"
                    }
                }
            },
            "delete": {
                "tags": [
                    "game"
                ],
                "summary": "Deletes a game",
                "description": "Deletes a game with an option to delete associated journal entries",
                "operationId": "deleteGame",
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "description": "The API key associated with the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gameid",
                        "in": "path",
                        "description": "Game id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "deleteJournalEntries",
                        "in": "query",
                        "description": "use true to delete associated blog entries",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                      "description": "The video game was deleted successfully."
                    },
                    "404": {
                      "description": "The video game with the given ID does not exist."
                    },
                    "500": {
                      "description": "An error occurred while deleting the video game."
                    }
                  }
            }
        },
        "/game/{gameid}/uploadImage": {
            "post": {
                "tags": [
                    "game"
                ],
                "summary": "Uploads an image",
                "description": "Upload an image for the game to display in related journal entries",
                "operationId": "uploadFile",
                "parameters": [
                    {
                        "name": "gameid",
                        "in": "path",
                        "description": "ID of game to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "additionalMetadata",
                        "in": "query",
                        "description": "Additional metadata",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/game/{gameid}/journal": {
            "get": {
                "summary": "get a specific game's journal",
                "tags": [
                    "game"
                ],
                "parameters": [
                    {
                        "name": "gameid",
                        "in": "path",
                        "description": "ID of the game with requested journal entries",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Journal"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/entry/": {
            "get": {
                "tags": [
                    "entry"
                ],
                "summary": "Returns all journal entries",
                "description": "Returns all visible journal entries",
                "operationId": "getEntries",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Entry"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Entry"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                }
            },
            "post": {
                "tags": [
                    "entry"
                ],
                "summary": "Create a new entry for a game",
                "description": "Create a new journal entry for an existing game",
                "operationId": "createEntry",
                "parameters":[
                    {
                        "name": "api_key",
                        "in": "header",
                        "description": "API key of the associated user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Entry"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Entry"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Entry"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Entry"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/entry/{entryid}": {
            "get": {
                "tags": [
                    "entry"
                ],
                "summary": "Return an entry by its ID",
                "description": "Returns a single entry with the given ID",
                "operationId": "getEntryById",
                "parameters": [
                    {
                        "name": "entryid",
                        "in": "path",
                        "description": "ID of the entry to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Entry"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Entry"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Game not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "entry"
                ],
                "summary": "Deletes an entry",
                "description": "Deletes a journal entry with the associated id",
                "operationId": "deleteEntry",
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "description": "The token associated with a logged-in user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entryid",
                        "in": "path",
                        "description": "ID of the entry to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                      "description": "The journal entry was deleted successfully."
                    },
                    "404": {
                      "description": "The journal entry with the given ID does not exist."
                    },
                    "500": {
                      "description": "An error occurred while deleting the journal entry."
                    }
                  }
            }
        },
        "/user/": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "requestBody": {
                    "description": "Created user object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates a list of users with given input array",
                "description": "Creates list of users with given input array",
                "operationId": "createUsersWithListInput",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Authenticate a registered user of the application",
                "description": "Log in a user",
                "operationId": "loginUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The user name for login",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login, in plain text for convenience",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation was successful",
                        "headers": {
                            "X-Rate-Limit": {
                                "description": "Calls per hour allowed by the user",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "X-Expires-After": {
                                "description": "Date in UTC when token expires",
                                "schema": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username or password supplied"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "Invalidates the user's current session token.",
                "operationId": "logoutUser",
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "You have logged out successfully."
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "description": "Look up a user's information using their display name",
                "operationId": "getUserByName",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name of the requested user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "description": "Update the user's name. This can only be done by the logged in user.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Name of the user to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "The operation was successful"
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404":{
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "Deletes the current user. This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "description": "The key associated with the logged in user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name of the user that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The operation was successful"
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Entry": {
                "type": "object",
                "description": "an entry in a game's journal",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The ID associated with this journal entry",
                        "example": 10
                    },
                    "gameId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The ID of the game written about in the entry",
                        "example": 198772
                    },
                    "status": {
                        "type": "string",
                        "description": "Journal entry status",
                        "example": "draft",
                        "enum": [
                            "published",
                            "invisible",
                            "draft"
                        ]
                    },
                    "publishedDate": {
                        "type": "string",
                        "description": "Date the entry was most recently set to published",
                        "format": "date-time"
                    },
                    "entryDate": {
                        "type": "string",
                        "description": "Date the entry was written",
                        "format": "date-time",
                        "example": "2023-03-12T13:48:41+0000"
                    },

                    "entryText": {
                        "type": "string",
                        "description": "The content of the journal entry"
                    },

                    "playStatus": {
                        "type": "string",
                        "description": "Whether the game was completed at the time this entry was written",
                        "enum": [
                            "playing",
                            "completed"
                        ]
                    }
                }
            },
            "Journal": {
                "type": "object",
                "description": "A collection of journal entries about a certain game or subject",
                "properties": {
                    "diaryEntries": {
                        "type": "array",
                        "description": "Entries related to a game",
                        "xml": {
                            "wrapped": true
                        },
                        "items": {
                            "$ref": "#/components/schemas/Entry"
                        }
                    }
                }
            },
            "Platform": {
                "type": "object",
                "description": "the platform where the video game was released",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The ID associated with a video game platform",
                        "example": 2600
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the video game platform",
                        "example": "Atari 2600"
                    }
                }
            },
            "User": {
                "type": "object",
                "description": "A user of the journal application",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1237
                    },
                    "username": {
                        "type": "string",
                        "example": "mixmaster"
                    },
                    "firstName": {
                        "type": "string",
                        "example": "John"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "James"
                    },
                    "email": {
                        "type": "string",
                        "example": "mixmaster@email.com"
                    },
                    "password": {
                        "type": "string",
                        "example": ""
                    },
                    "phone": {
                        "type": "string",
                        "example": "123-456-7840"
                    },
                    "userStatus": {
                        "type": "integer",
                        "description": "An ID associated with a user status such as 'online'",
                        "format": "int32",
                        "example": 1
                    }
                }
            },
            "Tag": {
                "type": "object",
                "description": "A tag to associate related journal entries by subject",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "example": "Top 10 of 2023"
                    }
                },
                "xml": {
                    "name": "journal-tag"
                }
            },
            "Game": {
                "required": [
                    "name",
                    "photoUrls"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10,
                        "description": "If this is not supplied, a unique id will be generated."
                    },
                    "name": {
                        "type": "string",
                        "example": "The Legend of Zelda: Ocarina of Time"
                    },
                    "platform": {
                        "$ref": "#/components/schemas/Platform"
                    },
                    "diaryEntries": {
                        "type": "array",
                        "description": "Entries related to the game",
                        "xml": {
                            "wrapped": true
                        },
                        "items": {
                            "$ref": "#/components/schemas/Entry"
                        }
                    },
                    "photoUrls": {
                        "type": "array",
                        "description": "links to related photos",
                        "xml": {
                            "wrapped": true
                        },
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "photoUrl"
                            }
                        }
                    },
                    "tags": {
                        "type": "array",
                        "xml": {
                            "wrapped": true
                        },
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                }
            }
        },
        "requestBodies": {
            "Game": {
                "description": "Game that needs to be added to the database",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Game"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Game"
                        }
                    }
                }
            },
            "UserArray": {
                "description": "List of user object",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "gamediary_auth": {
                "type": "oauth2",
                "flows": {
                    "implicit": {
                        "authorizationUrl": "https://gamediary3.swagger.io/oauth/authorize",
                        "scopes": {
                            "write:entries": "modify diary entries in your account",
                            "delete:entries": "delete diary entries in your account",
                            "delete:game": "delete a game from the database",
                            "delete:user": "delete a user account and all associated journal entries"
                        }
                    }
                }
            },
            "api_key": {
                "type": "apiKey",
                "description": "The API key associated with a registered user",
                "name": "api_key",
                "in": "header"
            }
        }
    }
}