openapi: 3.0.2
info:
  title: Video Game Diary API
  description: |-
    This is a sample interface for a gaming diary based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io).
  contact:
    email: brandonmerrimanosu@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: /api/v3
tags:
  - name: game
    description: 'a game''s identity and stats '
  - name: entry
    description: A diary entry
  - name: user
    description: user-focused operations
paths:
  /game:
    put:
      tags:
        - game
      summary: Update an existing game
      description: Update an existing game by Id
      operationId: updateGame
      requestBody:
        description: Update a game in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/xml:
            schema:
              $ref: '#/components/schemas/Game'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Success!
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
        '405':
          description: Validation exception
    post:
      tags:
        - game
      summary: Add a new game to the database
      description: Add a new game to the database
      operationId: addGame
      requestBody:
        description: Create a new game in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/xml:
            schema:
              $ref: '#/components/schemas/Game'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '405':
          description: Invalid input
  /game/findByStatus:
    get:
      tags:
        - game
      summary: Finds games by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findGamesByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for the filter
          required: false
          explode: true
          schema:
            type: string
            default: playing
            enum:
              - playing
              - completed
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '400':
          description: Invalid status value
  /game/findByTags:
    get:
      tags:
        - game
      summary: Finds games by user tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findGamesByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '400':
          description: Invalid tag value
  /game/{gameid}:
    get:
      tags:
        - game
      summary: Find game by ID
      description: Returns information about a single game
      operationId: getGameById
      parameters:
        - name: gameid
          in: path
          description: ID of game to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
    post:
      tags:
        - game
      summary: Update a game's playing status for the requesting user
      description: ''
      operationId: updateGameWithForm
      parameters:
        - name: gameid
          in: path
          description: ID of the game to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of the game that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: New playing status of the game
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - game
      summary: Deletes a game
      description: Deletes a game and associated diary entries
      operationId: deleteGame
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: gameid
          in: path
          description: Game id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid game value
  /game/{gameid}/uploadImage:
    post:
      tags:
        - game
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: gameid
          in: path
          description: ID of game to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /entry/:
    get:
      tags:
        - entry
      summary: Returns journal entries by status
      description: Returns a collection of journal entries according to their play status
      operationId: getEntries
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid tag value
      security:
        - api_key: []
    post:
      tags:
        - entry
      summary: Create a new entry for a game
      description: Create a journal entry for an existing game
      operationId: createEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
          application/xml:
            schema:
              $ref: '#/components/schemas/Entry'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '405':
          description: Invalid input
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates a list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name of the user to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name of the user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Entry:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        gameId:
          type: integer
          format: int64
          example: 198772
        status:
          type: string
          description: journal entry status
          example: draft
          enum:
            - published
            - invisible
            - draft
        publishedDate:
          type: string
          format: date-time
        entryDate:
          type: string
          format: date-time
          example: 2022-03-12T13:48:41+0000
        entryText:
          type: string
          format: date-time
        playStatus:
          type: string
          description: play status for the entry
          enum:
            - playing
            - completed
      xml:
        name: entry
    Platform:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Nintendo 64
      xml:
        name: platform
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: mixmaster
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: mixmaster@email.com
        password:
          type: string
          example: 12345@
        phone:
          type: string
          example: 123-456-7840
        userStatus:
          type: integer
          description: A status for a user, e.g. 'online', 'subscriber'
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Game:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          description: If this is not supplied, a unique id will be generated.
        name:
          type: string
          example: 'The Legend of Zelda: Ocarina of Time'
        platform:
          $ref: '#/components/schemas/Platform'
        photoUrls:
          type: array
          description: links to related photos
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: game
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Game:
      description: Game that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Game'
        application/xml:
          schema:
            $ref: '#/components/schemas/Game'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    gamediary_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://gamediary3.swagger.io/oauth/authorize
          scopes:
            write:entries: modify diary entries in your account
            read:entries: read your diary entries
    api_key:
      type: apiKey
      name: api_key
      in: header
